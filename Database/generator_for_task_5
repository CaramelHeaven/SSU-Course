package databaseSQL;

import java.util.*;

public class Generation {

    private static final int CONTROL_SIZE = 30;
    private static final int CONTROL_PERSONAL = 50;
    private static final int CONTROL_FOR_INDIVIDUAL_SCHEDULE = 20;

    //--------------------------------------------------------------------------------- CLIENT
    private static List<String> dbFirstNames = new ArrayList<>();
    private static List<String> dbLastNames = new ArrayList<>();
    private static List<String> dbGymMem = new ArrayList<>();
    private static List<String> dbBirthday = new ArrayList<>();

    private static List<String> firstNames = new ArrayList<>();
    private static List<String> lastNames = new ArrayList<>();
    private static List<String> gymMem = new ArrayList<>();
    private static List<String> birthday = new ArrayList<>();
    //--------------------------------------------------------------------------------- GYM MEMBERSHIP
    private static List<String> dayOfStart = new ArrayList<>();
    private static List<String> dayOfEnd = new ArrayList<>();
    private static List<Integer> priceFor = new ArrayList<>();
    private static List<Integer> randomId = new ArrayList<>();
    //--------------------------------------------------------------------------------- TRAINER
    private static List<String> trFirstName = new ArrayList<>();
    private static List<String> trLastName = new ArrayList<>();
    private static List<String> trBirthday = new ArrayList<>();
    //--------------------------------------------------------------------------------- INDIVIDUAL SCHEDULE
    private static List<String> time_start_INDV = new ArrayList<>();
    private static List<String> time_end_INDV = new ArrayList<>();
    private static List<String> dateINDV = new ArrayList<>();
    private static List<String> id_clientINDV = new ArrayList<>();
    private static List<String> id_trainerINDV = new ArrayList<>();

    public static void main(String[] args) {

        //client Directory
        setDbFirstNames();
        setDbLastNames();
        setDbGymMem();
        setDbBirthday();

        for (int i = 0; i < CONTROL_SIZE; i++) {
            int temp = generate(0, dbFirstNames.size() - 1);
            firstNames.add(dbFirstNames.get(temp));
        }

        for (int i = 0; i < CONTROL_SIZE; i++) {
            int temp = generate(0, dbLastNames.size() - 1);
            lastNames.add(dbLastNames.get(temp));
        }

        //add Client directory

        for (int i = 0; i < CONTROL_SIZE; i++) {
            System.out.println("insert into [Client Directory] values (" + i + ", " + "'"
                    + firstNames.get(i) + "'" + ", '" + lastNames.get(i) + "', " + gymMem.get(i) + ", '" + birthday.get(i) + "');");
        }

        //show Gym membership

        setDbDayOfStart();
        setDbDayOfEnd();
        setPriceOfMembership();
        generateRandomId();

       /* for (int i = 0; i < CONTROL_SIZE; i++) {
            int temp = generate(1, 5);
            System.out.println("insert [Gym Membership](id_gym_membership, day_of_start, day_of_end, price_of_membership, sale) values (" + i + ", " + "'"
                    + dayOfStart.get(i) + "'" + ", '" + dayOfEnd.get(i) + "', " + priceFor.get(i) + ", " + temp + ");");
        }*/

        //add Trainer Directory

        for (int i = 0; i < CONTROL_PERSONAL; i++) {
            int temp = generate(0, dbFirstNames.size() - 1);
            trFirstName.add(dbFirstNames.get(temp));
        }

        for (int i = 0; i < CONTROL_PERSONAL; i++) {
            int temp = generate(0, dbLastNames.size() - 1);
            trLastName.add(dbLastNames.get(temp));
        }

        setTrBirthday();

        /*for (int i = 0; i < CONTROL_PERSONAL; i++) {
            System.out.println("insert into [Trainer Directory] values (" + i + ", " + "'"
                    + trFirstName.get(i) + "'" + ", '" + trLastName.get(i) + ", '" + birthday.get(i) + "');");
        }*/


        //add Individual Schedule

        setTime_for_INDV();
        setDateINDV();

        for (int i = 0; i < CONTROL_FOR_INDIVIDUAL_SCHEDULE; i++) {
            int randClient = generate(CONTROL_SIZE / 2, CONTROL_SIZE);
            int randTrainer = generate(CONTROL_SIZE / 2, CONTROL_PERSONAL);
            if (!id_clientINDV.contains(String.valueOf(randClient)) && !id_trainerINDV.contains(String.valueOf(randTrainer))) {
                id_clientINDV.add(String.valueOf(randClient));
                id_trainerINDV.add(String.valueOf(randTrainer));
            }
        }

        //В Индивидуальном занятии будут находиться клиенты от второй половины общего числа. т.е. 60, 1 - 30 групповое
        //с 30 по 60 - индивидуальное
        for (int i = 0; i < id_trainerINDV.size(); i++) {
            System.out.println("insert into [Individual Schedule] values (" + i + ", " + "'"
                    + time_start_INDV.get(i) + "'" + ", '" + time_end_INDV.get(i) + "', " + id_clientINDV.get(i) + ", " + id_trainerINDV.get(i) + ");");
        }

        // GENERATE ClientTrace

    }

    private static void setDateINDV() {
        for (int i = 0; i < CONTROL_FOR_INDIVIDUAL_SCHEDULE; i++) {
            String day = String.valueOf(generate(0, 31));
            String month = String.valueOf(generate(0, 12));
            String year = String.valueOf(generate(2016, 2019));
            dateINDV.add(year + "-" + month + "-" + day);
        }
    }

    private static void setTime_for_INDV() {
        while (time_start_INDV.size() < CONTROL_FOR_INDIVIDUAL_SCHEDULE) {
            int hour = generate(7, 22);
            int minutes = generate(10, 60);

            int hourq = generate(7, 22);
            int minutesq = generate(10, 60);
            if (hour < hourq) {
                int temp = hourq - hour;
                if (temp < 3) {
                    String time_start = String.valueOf(hour) + ":" + String.valueOf(minutes);
                    String time_end = String.valueOf(hourq) + ":" + String.valueOf(minutesq);
                    time_start_INDV.add(time_start);
                    time_end_INDV.add(time_end);
                }
            }
        }
    }

    private static int generate(int min, int max) {
        Random random = new Random();
        return random.nextInt(max - min + 1) + min;
    }

    private static void setTrBirthday() {
        for (int i = 0; i < CONTROL_PERSONAL; i++) {
            String day = String.valueOf(generate(1, 31));
            String month = String.valueOf(generate(1, 12));
            String year = String.valueOf(generate(1950, 1999));
            trBirthday.add(year + "-" + month + "-" + day);
        }
    }

    private static void setDbBirthday() {
        for (int i = 0; i < CONTROL_SIZE; i++) {
            String day = String.valueOf(generate(1, 31));
            String month = String.valueOf(generate(1, 12));
            String year = String.valueOf(generate(1950, 1999));
            birthday.add(year + "-" + month + "-" + day);
        }
    }

    private static void setDbGymMem() {
        for (int i = 0; i < CONTROL_SIZE; i++) {
            gymMem.add("" + i);
        }
        Collections.shuffle(gymMem);
    }

    private static void generateRandomId() {
        for (int i = 0; i < CONTROL_SIZE; i++) {
            randomId.add(i);
        }
        Collections.shuffle(randomId);
    }

    private static void setPriceOfMembership() {
        for (int i = 0; i < CONTROL_SIZE; i++) {
            int temp = (generate(10000, 50000));
            priceFor.add(temp);
        }
    }

    private static void setDbLastNames() {
        dbLastNames.add("Teal");
        dbLastNames.add("Parodi");
        dbLastNames.add("Sander");
        dbLastNames.add("Lazarus");
        dbLastNames.add("Cavalli");
        dbLastNames.add("Zucconi");
        dbLastNames.add("Gravenor");
        dbLastNames.add("Juan");
        dbLastNames.add("Karabell");
        dbLastNames.add("Stotsky");
        dbLastNames.add("Matthaei");
        dbLastNames.add("Crowell");
        dbLastNames.add("Biron");
        dbLastNames.add("Metiu");
        dbLastNames.add("Lamberg-karlovsky");
        dbLastNames.add("Passeggieri");
        dbLastNames.add("Hackman");
        dbLastNames.add("Lamarre");
        dbLastNames.add("Kamael");
        dbLastNames.add("Scalia");
        dbLastNames.add("Kotlin");
        dbLastNames.add("Pratt");
        dbLastNames.add("Lecce");
        dbLastNames.add("Godlin");
        dbLastNames.add("Saef");
        dbLastNames.add("Pellish");
        dbLastNames.add("Burnley");
        dbLastNames.add("Schmitt");
        dbLastNames.add("Li");
        dbLastNames.add("Lieven");
        dbLastNames.add("Szajowski");
        dbLastNames.add("Ahn");
        dbLastNames.add("Winans");
        dbLastNames.add("Funkhouser");
        dbLastNames.add("Mc Dylan");
    }

    private static void setDbFirstNames() {
        dbFirstNames.add("Tianna");
        dbFirstNames.add("Debrah");
        dbFirstNames.add("Carie");
        dbFirstNames.add("Israel");
        dbFirstNames.add("Kina");
        dbFirstNames.add("Maddie");
        dbFirstNames.add("Dixie");
        dbFirstNames.add("Karren");
        dbFirstNames.add("Marissa");
        dbFirstNames.add("Cicely");
        dbFirstNames.add("Genoveva");
        dbFirstNames.add("Frederic");
        dbFirstNames.add("Deana");
        dbFirstNames.add("Francisca");
        dbFirstNames.add("Piper");
        dbFirstNames.add("Jere");
        dbFirstNames.add("Christoper");
        dbFirstNames.add("Teddy");
        dbFirstNames.add("Sonia");
        dbFirstNames.add("Thersa");
        dbFirstNames.add("Shelby");
        dbFirstNames.add("Bennett");
        dbFirstNames.add("Emmitt");
        dbFirstNames.add("Bennett");
        dbFirstNames.add("William");
        dbFirstNames.add("Carletta");
        dbFirstNames.add("Rosalyn");
        dbFirstNames.add("Horacio");
        dbFirstNames.add("Alan");
        dbFirstNames.add("Eloy");
        dbFirstNames.add("Miles");
        dbFirstNames.add("Sonia");
        dbFirstNames.add("Yon");
        dbFirstNames.add("Alda");
        dbFirstNames.add("Jeff");
        dbFirstNames.add("Dorian");
        dbFirstNames.add("Boyd");
        dbFirstNames.add("Ivan");
        dbFirstNames.add("Jody");
        dbFirstNames.add("Richie");
        dbFirstNames.add("Damian");
        dbFirstNames.add("Mickey");
        dbFirstNames.add("Jan");
        dbFirstNames.add("Loyd");
        dbFirstNames.add("Ward");
        dbFirstNames.add("Chet");
        dbFirstNames.add("Rupert");
        dbFirstNames.add("Jerry");
        dbFirstNames.add("Jeff");
        dbFirstNames.add("Jasper");
        dbFirstNames.add("Rofl");
        dbFirstNames.add("Jaime");
        dbFirstNames.add("Nestor");
        dbFirstNames.add("Elon");
        dbFirstNames.add("Nikolay");
        dbFirstNames.add("Victor");
        dbFirstNames.add("Ruslan");
        dbFirstNames.add("Ned");
        dbFirstNames.add("Garfield");
        dbFirstNames.add("Dan");
        dbFirstNames.add("Allan");
        dbFirstNames.add("Clair");
        dbFirstNames.add("Kris");
        dbFirstNames.add("Collin");
        dbFirstNames.add("Hank");
        dbFirstNames.add("Alfredo");
    }

    private static void setDbDayOfEnd() {
        for (int i = 0; i < CONTROL_SIZE; i++) {
            String day = String.valueOf(generate(1, 31));
            String month = String.valueOf(generate(1, 12));
            String year = String.valueOf(generate(2020, 2025));
            dayOfEnd.add(year + "-" + month + "-" + day + " 08:00:00");
        }
    }

    private static void setDbDayOfStart() {
        for (int i = 0; i < CONTROL_SIZE; i++) {
            String day = String.valueOf(generate(1, 31));
            String month = String.valueOf(generate(1, 12));
            String year = String.valueOf(generate(2009, 2015));
            dayOfStart.add(year + "-" + month + "-" + day + " 22:00:00");
        }
    }
}
