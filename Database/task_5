IF EXISTS (SELECT * FROM SYS.DATABASES WHERE NAME='GymDb')
DROP DATABASE GymDb
CREATE DATABASE GymDb
USE GymDb

--ЖИЗНЕННАЯ КОНСТРУКЦИЯ
set language english;

CREATE TABLE [Client Directory]
(
	id_client int NOT NULL CONSTRAINT PK_client PRIMARY KEY, 
	first_name varchar(50) NOT NULL,
	last_name varchar(50) NOT NULL,
	gym_membership_id int NULL,
	birthday date NOT NULL,
)
GO

CREATE TABLE [Trainer Directory]
(
	id_trainer int NOT NULL CONSTRAINT PK_trainer PRIMARY KEY,
	first_name varchar(50) NOT NULL,
	last_name varchar(50) NOT NULL,
	birthday date NOT NULL,
)
GO

CREATE TABLE [Gym Membership]
(
	id_gym_membership int NOT NULL CONSTRAINT PK_gym PRIMARY KEY,
	day_of_start datetime NOT NULL,
	day_of_end datetime NOT NULL,
	price_of_membership int NOT NULL,
	sale int NOT NULL,
)
GO

CREATE TABLE Sale
(
	id_sale int NOT NULL CONSTRAINT PK_sale PRIMARY KEY, 
	procent_of_sale int NOT NULL,
)
GO

CREATE TABLE [Individual Schedule]
(
	id_individual_work int NOT NULL CONSTRAINT PK_ind_work PRIMARY KEY,
	time_start time NOT NULL,
	time_end time NOT NULL,
	client_id int NULL,
	trainer_id int NULL
)
GO

CREATE TABLE [Group Schedule]
(
	id_group_schedule int NOT NULL CONSTRAINT PK_grp_schedule PRIMARY KEY,
	group_id int NOT NULL,
	place_id int NOT NULL,
	trainer_id int NOT NULL,
	time_start time NOT NULL,
	time_end time NOT NULL,
	day_of_week varchar(20) NOT NULL,
	type_of_sport_id int NOT NULL
)
GO

CREATE TABLE [Kind of Sport]
(
	id_kind int NOT NULL CONSTRAINT PK_id_kind PRIMARY KEY,
	name_kind varchar(50) NOT NULL
)
GO

CREATE TABLE Place
(
	id_place int NOT NULL CONSTRAINT PK_place PRIMARY KEY,
	name_place varchar(50) NOT NULL,
	quantity_place int NOT NULL
)
GO


CREATE TABLE ClientTrace
(
	id_group_client int NOT NULL CONSTRAINT PK_id_grp_client PRIMARY KEY,
	client_id int NOT NULL,
	client_date_start date NULL,
	client_date_end date NULL
)
GO

CREATE TABLE [Group work]
(
	id_group_work int NOT NULL CONSTRAINT PK_id_grp_work PRIMARY KEY,
	id_group int NOT NULL,
	name_group varchar(50) NOT NULL,
	get_people int NOT NULL
)
GO

--CREATE TABLE [People Quantity in the group]
--(
--	id int NOT NULL CONSTRAINT PK_id_PQ_in_TG PRIMARY KEY,
--	client int NOT NULL
--)
--GO

ALTER TABLE [Gym Membership]
--WITH CHECK 
WITH CHECK ADD CONSTRAINT [Gym_fk] FOREIGN KEY (sale) 
REFERENCES Sale(id_sale)
ON UPDATE CASCADE
GO

ALTER TABLE [Client Directory]
WITH CHECK ADD CONSTRAINT [Client_fk] FOREIGN KEY (gym_membership_id)
REFERENCES [Gym Membership]([id_gym_membership])
ON UPDATE CASCADE
GO

ALTER TABLE [Individual Schedule]
WITH CHECK ADD CONSTRAINT [IS_fk0_client_id] FOREIGN KEY (client_id)
REFERENCES [Client Directory](id_client)
ON UPDATE CASCADE
GO

ALTER TABLE [Individual Schedule]
WITH CHECK ADD CONSTRAINT [IS_fk1_trainer_id] FOREIGN KEY (trainer_id)
REFERENCES [Trainer Directory](id_trainer)
ON UPDATE CASCADE
GO

--ALTER TABLE [Group Schedule]
--WITH CHECK ADD CONSTRAINT [GS_fk0_group_id] FOREIGN KEY (group_id)
--REFERENCES [Group work](id_group_work)
--ON UPDATE CASCADE
--GO

ALTER TABLE [Group Schedule]
WITH CHECK ADD CONSTRAINT [GS_fk1_trainer_id] FOREIGN KEY (trainer_id)
REFERENCES [Trainer Directory](id_trainer)
ON UPDATE CASCADE
GO

ALTER TABLE [Group Schedule]
WITH CHECK ADD CONSTRAINT [GS_fk2_place_id] FOREIGN KEY (place_id)
REFERENCES Place(id_place)
ON UPDATE CASCADE
GO

ALTER TABLE [Group Schedule]
WITH CHECK ADD CONSTRAINT [GS_fk3_type_of_sport_id] FOREIGN KEY (type_of_sport_id)
REFERENCES [Kind of Sport](id_kind)
ON UPDATE CASCADE
GO

ALTER TABLE [Group work]
WITH CHECK ADD CONSTRAINT [GW_fk_get_people] FOREIGN KEY (get_people)
REFERENCES ClientTrace(id_group_client)
ON UPDATE CASCADE
GO

ALTER TABLE ClientTrace
WITH CHECK ADD CONSTRAINT [CT_fk_client_id] FOREIGN KEY (client_id)
REFERENCES [Client Directory](id_client)
ON UPDATE CASCADE
GO

--------------------------------------------------------------------------------------------------------------------
insert Sale(id_sale, procent_of_sale) values (1, 1);
insert Sale(id_sale, procent_of_sale) values (2, 4);
insert Sale(id_sale, procent_of_sale) values (3, 9);
insert Sale(id_sale, procent_of_sale) values (4, 12);
insert Sale(id_sale, procent_of_sale) values (5, 16);

insert[Gym Membership](id_gym_membership, day_of_start, day_of_end, price_of_membership, sale) 
values (1, '2014-4-27', '2014-6-25', 4023, 1);

--------------------------------------------------------------------------------------------------------------------

SELECT * FROM [Group Schedule]
DELETE FROM [Group Schedule]
DELETE FROM Place
SELECT * FROM [Group work] 
SELECT * FROM [Place] 
SELECT * FROM [Kind of Sport]
SELECT * FROM [Trainer Directory]
SELECT * FROM [Client Directory]
SELECT * FROM [Gym Membership] where id_gym_membership = 500
DELETE [Gym Membership]
SELECT * FROM ClientTrace
SELECT * FROM [Sale]

DROP TRIGGER delete_user

DELETE FROM [Client Directory] where id_client = 1 

SELECT     CAST(CAST(CAST('20060113' AS datetime) AS float) + (RAND() * (62 * 60 + 3)) / (24 * 60 * 60) AS datetime)
SELECT FLOOR(RAND()*(6-1)+1)
-------------------------------------------------------------------

--id_gym_membership int NOT NULL CONSTRAINT PK_gym PRIMARY KEY,
--	day_of_start date NOT NULL,
--	day_of_end date NOT NULL,
--	price_of_membership int NOT NULL,
--	sale int NOT NULL,


SELECT * FROm [Gym Membership]
DELETE [Gym Membership]


--SET INDEXS
CREATE NONCLUSTERED INDEX price ON [Gym Membership](price_of_membership)

--Смотрим сколько человек в одной групповой тренировке Inner Join
select * from [Group work] inner join [Client Directory] on [Group work].get_people = [Client Directory].id_client where name_group = 'Group № 1'

--Количество групповых занятий по вторнику
select COUNT(*) from [Group Schedule] where day_of_week = 'Tuesday'

--Выбрать тренеров между двумя датами рождения
select * from [Trainer Directory] where [Trainer Directory].birthday between '1975-6-14' and '1987-1-16'

--Выводим оплату клиента которую имеют скидку 4% или 9%
select price_of_membership from [Gym Membership] where [Gym Membership].sale > 2 AND price_of_membership > ANY (select price_of_membership from [Gym Membership] where
[Gym Membership].sale = 3)

--Выводим время занятий меньше 14:00 часов дня и при это мы проверяем, что места совпадают
select time_start, time_end, [Group Schedule].day_of_week from [Group Schedule] join [Trainer Directory] on [Trainer Directory].id_trainer = id_group_schedule
join Place on Place.id_place = place_id where time_start < '14:00'

--Выделяем клиентов, у которых срок конца абонемента меньше 2018 года
select day_of_start, day_of_end, first_name, last_name, [Gym Membership].price_of_membership from [Gym Membership] join [Client Directory] on [Client Directory].id_client = id_gym_membership
where day_of_end < '2018-5-23' 

--Выводим список клиентов у которых есть индивидуальное занятие и их тренеров
select * from [Client Directory] join [Individual Schedule] on [Client Directory].id_client = [Individual Schedule].client_id join [Trainer Directory]
on [Individual Schedule].trainer_id = [Trainer Directory].id_trainer 

--Выводим названия залов у групповых занятий
select name_place, COUNT(*) from Place join [Group Schedule] on Place.id_place = [Group Schedule].place_id group by name_place

--Выводим групповые занятия, если до 12 часов - топ пишем АМ, иначе после обеда занятие
select *, case when time_start < '12:00' then 'AM time' when time_start > '12:00' then 'PM time' end as 'Time working' from [Group Schedule]

--Выводим среднюю плату клиентов за абонемент
select CAST(AVG(price_of_membership) as char(10)) 'Middle price Clients' from [Gym Membership] 

--Выводим среднюю зарплату тренеров
select CAST(AVG(salary) as char(10)) 'Middle price Trainers' from [Trainer Directory]

--Сортируем клиентов по рождению
select id_client, first_name, last_name, birthday, (select DATEDIFF(YEAR, birthday, GETDATE())) 'Age client' from [Client Directory] order by birthday



SET STATISTICS IO ON
SET STATISTICS TIME ON
SELECT * FROM [Gym Membership] WHERE price_of_membership = 41292


